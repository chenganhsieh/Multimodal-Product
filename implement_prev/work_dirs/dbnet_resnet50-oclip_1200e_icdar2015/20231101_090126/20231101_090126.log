2023/11/01 09:01:27 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.18 (default, Sep 11 2023, 13:40:15) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 2052244207
    GPU 0,1,2,3,4,5: NVIDIA GeForce RTX 4090
    CUDA_HOME: /usr/local/cuda-11.3
    NVCC: Cuda compilation tools, release 11.3, V11.3.58
    GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
    PyTorch: 1.10.2
    PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

    TorchVision: 0.11.3
    OpenCV: 4.8.1
    MMEngine: 0.9.0

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 2052244207
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/11/01 09:01:27 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16)
default_hooks = dict(
    checkpoint=dict(interval=20, type='CheckpointHook'),
    logger=dict(interval=5, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    sync_buffer=dict(type='SyncBuffersHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(
        draw_gt=False,
        draw_pred=False,
        enable=False,
        interval=1,
        show=False,
        type='VisualizationHook'))
default_scope = 'mmocr'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
icdar2015_textdet_data_root = 'data/icdar2015'
icdar2015_textdet_test = dict(
    ann_file='textdet_test.json',
    data_root='data/icdar2015',
    pipeline=[
        dict(color_type='color_ignore_orientation', type='LoadImageFromFile'),
        dict(keep_ratio=True, scale=(
            4068,
            1024,
        ), type='Resize'),
        dict(
            type='LoadOCRAnnotations',
            with_bbox=True,
            with_label=True,
            with_polygon=True),
        dict(
            meta_keys=(
                'img_path',
                'ori_shape',
                'img_shape',
                'scale_factor',
            ),
            type='PackTextDetInputs'),
    ],
    test_mode=True,
    type='OCRDataset')
icdar2015_textdet_train = dict(
    ann_file='textdet_train.json',
    data_root='data/icdar2015',
    filter_cfg=dict(filter_empty_gt=True, min_size=32),
    pipeline=[
        dict(color_type='color_ignore_orientation', type='LoadImageFromFile'),
        dict(
            type='LoadOCRAnnotations',
            with_bbox=True,
            with_label=True,
            with_polygon=True),
        dict(
            brightness=0.12549019607843137,
            op='ColorJitter',
            saturation=0.5,
            type='TorchVisionWrapper'),
        dict(
            args=[
                [
                    'Fliplr',
                    0.5,
                ],
                dict(cls='Affine', rotate=[
                    -10,
                    10,
                ]),
                [
                    'Resize',
                    [
                        0.5,
                        3.0,
                    ],
                ],
            ],
            type='ImgAugWrapper'),
        dict(min_side_ratio=0.1, type='RandomCrop'),
        dict(keep_ratio=True, scale=(
            640,
            640,
        ), type='Resize'),
        dict(size=(
            640,
            640,
        ), type='Pad'),
        dict(
            meta_keys=(
                'img_path',
                'ori_shape',
                'img_shape',
            ),
            type='PackTextDetInputs'),
    ],
    type='OCRDataset')
launcher = 'none'
load_from = 'checkpoints/dbnet_resnet50-oclip_1200e_icdar2015_20221102_115917-bde8c87a.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=10)
model = dict(
    backbone=dict(
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmocr/backbone/resnet50-oclip-7ba0c533.pth',
            type='Pretrained'),
        type='CLIPResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='TextDetDataPreprocessor'),
    det_head=dict(
        in_channels=256,
        module_loss=dict(type='DBModuleLoss'),
        postprocessor=dict(text_repr_type='quad', type='DBPostprocessor'),
        type='DBHead'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        lateral_channels=256,
        type='FPNC'),
    type='DBNet')
optim_wrapper = dict(
    optimizer=dict(lr=0.002, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(end=100, start_factor=0.001, type='LinearLR'),
    dict(begin=100, end=1200, eta_min=1e-07, power=0.9, type='PolyLR'),
]
randomness = dict(seed=None)
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='textdet_test.json',
        data_root='data/icdar2015',
        pipeline=[
            dict(
                color_type='color_ignore_orientation',
                type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                4068,
                1024,
            ), type='Resize'),
            dict(
                type='LoadOCRAnnotations',
                with_bbox=True,
                with_label=True,
                with_polygon=True),
            dict(
                meta_keys=(
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackTextDetInputs'),
        ],
        test_mode=True,
        type='OCRDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(type='HmeanIOUMetric')
test_pipeline = [
    dict(color_type='color_ignore_orientation', type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        4068,
        1024,
    ), type='Resize'),
    dict(
        type='LoadOCRAnnotations',
        with_bbox=True,
        with_label=True,
        with_polygon=True),
    dict(
        meta_keys=(
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackTextDetInputs'),
]
train_cfg = dict(max_epochs=1200, type='EpochBasedTrainLoop', val_interval=20)
train_dataloader = dict(
    batch_size=16,
    dataset=dict(
        ann_file='textdet_train.json',
        data_root='data/icdar2015',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        pipeline=[
            dict(
                color_type='color_ignore_orientation',
                type='LoadImageFromFile'),
            dict(
                type='LoadOCRAnnotations',
                with_bbox=True,
                with_label=True,
                with_polygon=True),
            dict(
                brightness=0.12549019607843137,
                op='ColorJitter',
                saturation=0.5,
                type='TorchVisionWrapper'),
            dict(
                args=[
                    [
                        'Fliplr',
                        0.5,
                    ],
                    dict(cls='Affine', rotate=[
                        -10,
                        10,
                    ]),
                    [
                        'Resize',
                        [
                            0.5,
                            3.0,
                        ],
                    ],
                ],
                type='ImgAugWrapper'),
            dict(min_side_ratio=0.1, type='RandomCrop'),
            dict(keep_ratio=True, scale=(
                640,
                640,
            ), type='Resize'),
            dict(size=(
                640,
                640,
            ), type='Pad'),
            dict(
                meta_keys=(
                    'img_path',
                    'ori_shape',
                    'img_shape',
                ),
                type='PackTextDetInputs'),
        ],
        type='OCRDataset'),
    num_workers=24,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(color_type='color_ignore_orientation', type='LoadImageFromFile'),
    dict(
        type='LoadOCRAnnotations',
        with_bbox=True,
        with_label=True,
        with_polygon=True),
    dict(
        brightness=0.12549019607843137,
        op='ColorJitter',
        saturation=0.5,
        type='TorchVisionWrapper'),
    dict(
        args=[
            [
                'Fliplr',
                0.5,
            ],
            dict(cls='Affine', rotate=[
                -10,
                10,
            ]),
            [
                'Resize',
                [
                    0.5,
                    3.0,
                ],
            ],
        ],
        type='ImgAugWrapper'),
    dict(min_side_ratio=0.1, type='RandomCrop'),
    dict(keep_ratio=True, scale=(
        640,
        640,
    ), type='Resize'),
    dict(size=(
        640,
        640,
    ), type='Pad'),
    dict(
        meta_keys=(
            'img_path',
            'ori_shape',
            'img_shape',
        ),
        type='PackTextDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='textdet_test.json',
        data_root='data/icdar2015',
        pipeline=[
            dict(
                color_type='color_ignore_orientation',
                type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                4068,
                1024,
            ), type='Resize'),
            dict(
                type='LoadOCRAnnotations',
                with_bbox=True,
                with_label=True,
                with_polygon=True),
            dict(
                meta_keys=(
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackTextDetInputs'),
        ],
        test_mode=True,
        type='OCRDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(type='HmeanIOUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='TextDetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_dirs/dbnet_resnet50-oclip_1200e_icdar2015'

2023/11/01 09:01:30 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/11/01 09:01:30 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SyncBuffersHook                    
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SyncBuffersHook                    
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/11/01 09:01:30 - mmengine - INFO - Load checkpoint from checkpoints/dbnet_resnet50-oclip_1200e_icdar2015_20221102_115917-bde8c87a.pth
2023/11/01 09:01:32 - mmengine - INFO - Epoch(test) [  5/500]    eta: 0:02:32  time: 0.3085  data_time: 0.1753  memory: 715  
2023/11/01 09:01:32 - mmengine - INFO - Epoch(test) [ 10/500]    eta: 0:01:24  time: 0.1716  data_time: 0.0886  memory: 715  
2023/11/01 09:01:32 - mmengine - INFO - Epoch(test) [ 15/500]    eta: 0:01:00  time: 0.0327  data_time: 0.0017  memory: 715  
2023/11/01 09:01:32 - mmengine - INFO - Epoch(test) [ 20/500]    eta: 0:00:51  time: 0.0413  data_time: 0.0017  memory: 715  
2023/11/01 09:01:32 - mmengine - INFO - Epoch(test) [ 25/500]    eta: 0:00:43  time: 0.0434  data_time: 0.0017  memory: 715  
2023/11/01 09:01:33 - mmengine - INFO - Epoch(test) [ 30/500]    eta: 0:00:38  time: 0.0360  data_time: 0.0017  memory: 715  
2023/11/01 09:01:33 - mmengine - INFO - Epoch(test) [ 35/500]    eta: 0:00:35  time: 0.0376  data_time: 0.0017  memory: 715  
2023/11/01 09:01:33 - mmengine - INFO - Epoch(test) [ 40/500]    eta: 0:00:32  time: 0.0344  data_time: 0.0018  memory: 715  
2023/11/01 09:01:33 - mmengine - INFO - Epoch(test) [ 45/500]    eta: 0:00:30  time: 0.0305  data_time: 0.0017  memory: 715  
2023/11/01 09:01:33 - mmengine - INFO - Epoch(test) [ 50/500]    eta: 0:00:28  time: 0.0307  data_time: 0.0017  memory: 715  
2023/11/01 09:01:33 - mmengine - INFO - Epoch(test) [ 55/500]    eta: 0:00:26  time: 0.0313  data_time: 0.0017  memory: 715  
2023/11/01 09:01:33 - mmengine - INFO - Epoch(test) [ 60/500]    eta: 0:00:25  time: 0.0342  data_time: 0.0017  memory: 715  
2023/11/01 09:01:34 - mmengine - INFO - Epoch(test) [ 65/500]    eta: 0:00:24  time: 0.0336  data_time: 0.0017  memory: 715  
2023/11/01 09:01:34 - mmengine - INFO - Epoch(test) [ 70/500]    eta: 0:00:23  time: 0.0337  data_time: 0.0017  memory: 715  
2023/11/01 09:01:34 - mmengine - INFO - Epoch(test) [ 75/500]    eta: 0:00:22  time: 0.0344  data_time: 0.0017  memory: 715  
2023/11/01 09:01:34 - mmengine - INFO - Epoch(test) [ 80/500]    eta: 0:00:21  time: 0.0340  data_time: 0.0017  memory: 715  
2023/11/01 09:01:34 - mmengine - INFO - Epoch(test) [ 85/500]    eta: 0:00:21  time: 0.0337  data_time: 0.0017  memory: 715  
2023/11/01 09:01:34 - mmengine - INFO - Epoch(test) [ 90/500]    eta: 0:00:20  time: 0.0328  data_time: 0.0017  memory: 715  
2023/11/01 09:01:35 - mmengine - INFO - Epoch(test) [ 95/500]    eta: 0:00:19  time: 0.0328  data_time: 0.0017  memory: 715  
2023/11/01 09:01:35 - mmengine - INFO - Epoch(test) [100/500]    eta: 0:00:19  time: 0.0317  data_time: 0.0017  memory: 715  
2023/11/01 09:01:35 - mmengine - INFO - Epoch(test) [105/500]    eta: 0:00:18  time: 0.0339  data_time: 0.0017  memory: 715  
2023/11/01 09:01:35 - mmengine - INFO - Epoch(test) [110/500]    eta: 0:00:18  time: 0.0468  data_time: 0.0017  memory: 715  
2023/11/01 09:01:35 - mmengine - INFO - Epoch(test) [115/500]    eta: 0:00:18  time: 0.0457  data_time: 0.0017  memory: 715  
2023/11/01 09:01:36 - mmengine - INFO - Epoch(test) [120/500]    eta: 0:00:17  time: 0.0349  data_time: 0.0017  memory: 715  
2023/11/01 09:01:36 - mmengine - INFO - Epoch(test) [125/500]    eta: 0:00:17  time: 0.0344  data_time: 0.0017  memory: 715  
2023/11/01 09:01:36 - mmengine - INFO - Epoch(test) [130/500]    eta: 0:00:16  time: 0.0311  data_time: 0.0017  memory: 715  
2023/11/01 09:01:36 - mmengine - INFO - Epoch(test) [135/500]    eta: 0:00:16  time: 0.0360  data_time: 0.0017  memory: 715  
2023/11/01 09:01:36 - mmengine - INFO - Epoch(test) [140/500]    eta: 0:00:16  time: 0.0399  data_time: 0.0017  memory: 715  
2023/11/01 09:01:37 - mmengine - INFO - Epoch(test) [145/500]    eta: 0:00:15  time: 0.0364  data_time: 0.0017  memory: 715  
2023/11/01 09:01:37 - mmengine - INFO - Epoch(test) [150/500]    eta: 0:00:15  time: 0.0350  data_time: 0.0017  memory: 715  
2023/11/01 09:01:37 - mmengine - INFO - Epoch(test) [155/500]    eta: 0:00:15  time: 0.0337  data_time: 0.0017  memory: 715  
2023/11/01 09:01:37 - mmengine - INFO - Epoch(test) [160/500]    eta: 0:00:14  time: 0.0364  data_time: 0.0017  memory: 715  
2023/11/01 09:01:37 - mmengine - INFO - Epoch(test) [165/500]    eta: 0:00:14  time: 0.0360  data_time: 0.0017  memory: 715  
2023/11/01 09:01:37 - mmengine - INFO - Epoch(test) [170/500]    eta: 0:00:14  time: 0.0332  data_time: 0.0017  memory: 715  
2023/11/01 09:01:38 - mmengine - INFO - Epoch(test) [175/500]    eta: 0:00:14  time: 0.0341  data_time: 0.0017  memory: 715  
2023/11/01 09:01:38 - mmengine - INFO - Epoch(test) [180/500]    eta: 0:00:13  time: 0.0315  data_time: 0.0017  memory: 715  
2023/11/01 09:01:38 - mmengine - INFO - Epoch(test) [185/500]    eta: 0:00:13  time: 0.0307  data_time: 0.0017  memory: 715  
2023/11/01 09:01:38 - mmengine - INFO - Epoch(test) [190/500]    eta: 0:00:13  time: 0.0314  data_time: 0.0017  memory: 715  
2023/11/01 09:01:38 - mmengine - INFO - Epoch(test) [195/500]    eta: 0:00:12  time: 0.0327  data_time: 0.0017  memory: 715  
2023/11/01 09:01:38 - mmengine - INFO - Epoch(test) [200/500]    eta: 0:00:12  time: 0.0332  data_time: 0.0017  memory: 715  
2023/11/01 09:01:39 - mmengine - INFO - Epoch(test) [205/500]    eta: 0:00:12  time: 0.0312  data_time: 0.0017  memory: 715  
2023/11/01 09:01:39 - mmengine - INFO - Epoch(test) [210/500]    eta: 0:00:11  time: 0.0299  data_time: 0.0016  memory: 715  
2023/11/01 09:01:39 - mmengine - INFO - Epoch(test) [215/500]    eta: 0:00:11  time: 0.0316  data_time: 0.0016  memory: 715  
2023/11/01 09:01:39 - mmengine - INFO - Epoch(test) [220/500]    eta: 0:00:11  time: 0.0346  data_time: 0.0016  memory: 715  
2023/11/01 09:01:39 - mmengine - INFO - Epoch(test) [225/500]    eta: 0:00:11  time: 0.0339  data_time: 0.0016  memory: 715  
2023/11/01 09:01:39 - mmengine - INFO - Epoch(test) [230/500]    eta: 0:00:10  time: 0.0316  data_time: 0.0017  memory: 715  
2023/11/01 09:01:40 - mmengine - INFO - Epoch(test) [235/500]    eta: 0:00:10  time: 0.0373  data_time: 0.0017  memory: 715  
2023/11/01 09:01:40 - mmengine - INFO - Epoch(test) [240/500]    eta: 0:00:10  time: 0.0396  data_time: 0.0016  memory: 715  
2023/11/01 09:01:40 - mmengine - INFO - Epoch(test) [245/500]    eta: 0:00:10  time: 0.0367  data_time: 0.0016  memory: 715  
2023/11/01 09:01:40 - mmengine - INFO - Epoch(test) [250/500]    eta: 0:00:10  time: 0.0354  data_time: 0.0016  memory: 715  
2023/11/01 09:01:40 - mmengine - INFO - Epoch(test) [255/500]    eta: 0:00:09  time: 0.0323  data_time: 0.0016  memory: 715  
2023/11/01 09:01:40 - mmengine - INFO - Epoch(test) [260/500]    eta: 0:00:09  time: 0.0332  data_time: 0.0016  memory: 715  
2023/11/01 09:01:41 - mmengine - INFO - Epoch(test) [265/500]    eta: 0:00:09  time: 0.0413  data_time: 0.0016  memory: 715  
2023/11/01 09:01:41 - mmengine - INFO - Epoch(test) [270/500]    eta: 0:00:09  time: 0.0396  data_time: 0.0016  memory: 715  
2023/11/01 09:01:41 - mmengine - INFO - Epoch(test) [275/500]    eta: 0:00:08  time: 0.0312  data_time: 0.0016  memory: 715  
2023/11/01 09:01:41 - mmengine - INFO - Epoch(test) [280/500]    eta: 0:00:08  time: 0.0335  data_time: 0.0016  memory: 715  
2023/11/01 09:01:41 - mmengine - INFO - Epoch(test) [285/500]    eta: 0:00:08  time: 0.0339  data_time: 0.0016  memory: 715  
2023/11/01 09:01:41 - mmengine - INFO - Epoch(test) [290/500]    eta: 0:00:08  time: 0.0334  data_time: 0.0016  memory: 715  
2023/11/01 09:01:42 - mmengine - INFO - Epoch(test) [295/500]    eta: 0:00:08  time: 0.0323  data_time: 0.0016  memory: 715  
2023/11/01 09:01:42 - mmengine - INFO - Epoch(test) [300/500]    eta: 0:00:07  time: 0.0308  data_time: 0.0016  memory: 715  
2023/11/01 09:01:42 - mmengine - INFO - Epoch(test) [305/500]    eta: 0:00:07  time: 0.0349  data_time: 0.0016  memory: 715  
2023/11/01 09:01:42 - mmengine - INFO - Epoch(test) [310/500]    eta: 0:00:07  time: 0.0353  data_time: 0.0016  memory: 715  
2023/11/01 09:01:42 - mmengine - INFO - Epoch(test) [315/500]    eta: 0:00:07  time: 0.0333  data_time: 0.0016  memory: 715  
2023/11/01 09:01:42 - mmengine - INFO - Epoch(test) [320/500]    eta: 0:00:07  time: 0.0357  data_time: 0.0016  memory: 715  
2023/11/01 09:01:43 - mmengine - INFO - Epoch(test) [325/500]    eta: 0:00:06  time: 0.0339  data_time: 0.0016  memory: 715  
2023/11/01 09:01:43 - mmengine - INFO - Epoch(test) [330/500]    eta: 0:00:06  time: 0.0314  data_time: 0.0016  memory: 715  
2023/11/01 09:01:43 - mmengine - INFO - Epoch(test) [335/500]    eta: 0:00:06  time: 0.0340  data_time: 0.0016  memory: 715  
2023/11/01 09:01:43 - mmengine - INFO - Epoch(test) [340/500]    eta: 0:00:06  time: 0.0339  data_time: 0.0016  memory: 715  
2023/11/01 09:01:43 - mmengine - INFO - Epoch(test) [345/500]    eta: 0:00:05  time: 0.0320  data_time: 0.0016  memory: 715  
2023/11/01 09:01:43 - mmengine - INFO - Epoch(test) [350/500]    eta: 0:00:05  time: 0.0326  data_time: 0.0017  memory: 715  
2023/11/01 09:01:44 - mmengine - INFO - Epoch(test) [355/500]    eta: 0:00:05  time: 0.0327  data_time: 0.0017  memory: 715  
2023/11/01 09:01:44 - mmengine - INFO - Epoch(test) [360/500]    eta: 0:00:05  time: 0.0341  data_time: 0.0016  memory: 715  
2023/11/01 09:01:44 - mmengine - INFO - Epoch(test) [365/500]    eta: 0:00:05  time: 0.0341  data_time: 0.0016  memory: 715  
2023/11/01 09:01:44 - mmengine - INFO - Epoch(test) [370/500]    eta: 0:00:04  time: 0.0350  data_time: 0.0016  memory: 715  
2023/11/01 09:01:44 - mmengine - INFO - Epoch(test) [375/500]    eta: 0:00:04  time: 0.0422  data_time: 0.0016  memory: 715  
2023/11/01 09:01:45 - mmengine - INFO - Epoch(test) [380/500]    eta: 0:00:04  time: 0.0398  data_time: 0.0016  memory: 715  
2023/11/01 09:01:45 - mmengine - INFO - Epoch(test) [385/500]    eta: 0:00:04  time: 0.0325  data_time: 0.0016  memory: 715  
2023/11/01 09:01:45 - mmengine - INFO - Epoch(test) [390/500]    eta: 0:00:04  time: 0.0372  data_time: 0.0017  memory: 715  
2023/11/01 09:01:45 - mmengine - INFO - Epoch(test) [395/500]    eta: 0:00:04  time: 0.0392  data_time: 0.0017  memory: 715  
2023/11/01 09:01:45 - mmengine - INFO - Epoch(test) [400/500]    eta: 0:00:03  time: 0.0352  data_time: 0.0018  memory: 715  
2023/11/01 09:01:45 - mmengine - INFO - Epoch(test) [405/500]    eta: 0:00:03  time: 0.0336  data_time: 0.0018  memory: 715  
2023/11/01 09:01:46 - mmengine - INFO - Epoch(test) [410/500]    eta: 0:00:03  time: 0.0322  data_time: 0.0017  memory: 715  
2023/11/01 09:01:46 - mmengine - INFO - Epoch(test) [415/500]    eta: 0:00:03  time: 0.0309  data_time: 0.0016  memory: 715  
2023/11/01 09:01:46 - mmengine - INFO - Epoch(test) [420/500]    eta: 0:00:03  time: 0.0323  data_time: 0.0016  memory: 715  
2023/11/01 09:01:46 - mmengine - INFO - Epoch(test) [425/500]    eta: 0:00:02  time: 0.0329  data_time: 0.0016  memory: 715  
2023/11/01 09:01:46 - mmengine - INFO - Epoch(test) [430/500]    eta: 0:00:02  time: 0.0316  data_time: 0.0016  memory: 715  
2023/11/01 09:01:46 - mmengine - INFO - Epoch(test) [435/500]    eta: 0:00:02  time: 0.0324  data_time: 0.0016  memory: 715  
2023/11/01 09:01:47 - mmengine - INFO - Epoch(test) [440/500]    eta: 0:00:02  time: 0.0341  data_time: 0.0017  memory: 715  
2023/11/01 09:01:47 - mmengine - INFO - Epoch(test) [445/500]    eta: 0:00:02  time: 0.0353  data_time: 0.0016  memory: 715  
2023/11/01 09:01:47 - mmengine - INFO - Epoch(test) [450/500]    eta: 0:00:01  time: 0.0341  data_time: 0.0016  memory: 715  
2023/11/01 09:01:47 - mmengine - INFO - Epoch(test) [455/500]    eta: 0:00:01  time: 0.0320  data_time: 0.0016  memory: 715  
2023/11/01 09:01:47 - mmengine - INFO - Epoch(test) [460/500]    eta: 0:00:01  time: 0.0343  data_time: 0.0016  memory: 715  
2023/11/01 09:01:47 - mmengine - INFO - Epoch(test) [465/500]    eta: 0:00:01  time: 0.0340  data_time: 0.0016  memory: 715  
2023/11/01 09:01:48 - mmengine - INFO - Epoch(test) [470/500]    eta: 0:00:01  time: 0.0304  data_time: 0.0016  memory: 715  
2023/11/01 09:01:48 - mmengine - INFO - Epoch(test) [475/500]    eta: 0:00:00  time: 0.0340  data_time: 0.0016  memory: 715  
2023/11/01 09:01:48 - mmengine - INFO - Epoch(test) [480/500]    eta: 0:00:00  time: 0.0346  data_time: 0.0016  memory: 715  
2023/11/01 09:01:48 - mmengine - INFO - Epoch(test) [485/500]    eta: 0:00:00  time: 0.0330  data_time: 0.0016  memory: 715  
2023/11/01 09:01:48 - mmengine - INFO - Epoch(test) [490/500]    eta: 0:00:00  time: 0.0364  data_time: 0.0016  memory: 715  
2023/11/01 09:01:48 - mmengine - INFO - Epoch(test) [495/500]    eta: 0:00:00  time: 0.0349  data_time: 0.0016  memory: 715  
2023/11/01 09:01:49 - mmengine - INFO - Epoch(test) [500/500]    eta: 0:00:00  time: 0.0358  data_time: 0.0014  memory: 715  
2023/11/01 09:01:49 - mmengine - INFO - Evaluating hmean-iou...
2023/11/01 09:01:49 - mmengine - INFO - prediction score threshold: 0.30, recall: 0.8426, precision: 0.7619, hmean: 0.8002

2023/11/01 09:01:49 - mmengine - INFO - prediction score threshold: 0.40, recall: 0.8426, precision: 0.8204, hmean: 0.8314

2023/11/01 09:01:49 - mmengine - INFO - prediction score threshold: 0.50, recall: 0.8416, precision: 0.8535, hmean: 0.8475

2023/11/01 09:01:49 - mmengine - INFO - prediction score threshold: 0.60, recall: 0.8382, precision: 0.8771, hmean: 0.8572

2023/11/01 09:01:49 - mmengine - INFO - prediction score threshold: 0.70, recall: 0.8272, precision: 0.9052, hmean: 0.8644

2023/11/01 09:01:49 - mmengine - INFO - prediction score threshold: 0.80, recall: 0.7232, precision: 0.9352, hmean: 0.8156

2023/11/01 09:01:49 - mmengine - INFO - prediction score threshold: 0.90, recall: 0.1854, precision: 0.9553, hmean: 0.3105

2023/11/01 09:01:49 - mmengine - INFO - Epoch(test) [500/500]    icdar/precision: 0.9052  icdar/recall: 0.8272  icdar/hmean: 0.8644  data_time: 0.0034  time: 0.0372
