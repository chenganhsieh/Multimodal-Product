{"env_info": "sys.platform: linux\nPython: 3.8.18 (default, Sep 11 2023, 13:40:15) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5: NVIDIA GeForce RTX 4090\nCUDA_HOME: /usr/local/cuda-11.3\nNVCC: Build cuda_11.3.r11.3/compiler.29745058_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.10.2\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.3\nOpenCV: 4.8.1\nMMCV: 1.3.17\nMMCV Compiler: GCC 7.5\nMMCV CUDA Compiler: 11.3\nMMOCR: 0.4.0+0386831", "config": "log_config = dict(interval=10, hooks=[dict(type='DetailTextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nfind_unused_parameters = True\nrunner = dict(type='EpochBasedRunner', max_epochs=1200)\ncheckpoint_config = dict(by_epoch=True, interval=300)\nevaluation = dict(\n    interval=5,\n    metric='hmean-iou',\n    save_best='0_icdar2015_test_hmean-iou:hmean',\n    rule='greater')\ncustom_imports = dict(\n    imports=['ocrclip', 'datasets', 'hooks', 'optimizer'],\n    allow_failed_imports=False)\nopencv_num_threads = 0\nmp_start_method = 'fork'\nprompt_class_names = ['the pixels of many arbitrary-shape text instances.']\nmodel = dict(\n    type='OCRCLIP',\n    pretrained='./pretrained/RN50.pt',\n    context_length=14,\n    class_names=['the pixels of many arbitrary-shape text instances.'],\n    use_learnable_prompt=True,\n    use_learnable_prompt_only=False,\n    backbone=dict(\n        type='CLIPResNetWithAttention',\n        layers=[3, 4, 6, 3],\n        output_dim=1024,\n        input_resolution=640,\n        style='pytorch'),\n    text_encoder=dict(\n        type='CLIPTextContextEncoder',\n        context_length=18,\n        embed_dim=1024,\n        transformer_width=512,\n        transformer_heads=8,\n        transformer_layers=12,\n        style='pytorch'),\n    prompt_generator=dict(\n        type='PromptGenerator',\n        visual_dim=1024,\n        token_embed_dim=512,\n        style='pytorch'),\n    context_decoder=dict(\n        type='ContextDecoder',\n        transformer_width=256,\n        transformer_heads=4,\n        transformer_layers=3,\n        visual_dim=1024,\n        dropout=0.1,\n        outdim=1024,\n        style='pytorch'),\n    visual_prompt_generator=dict(\n        type='ContextDecoder',\n        transformer_width=256,\n        transformer_heads=4,\n        transformer_layers=3,\n        visual_dim=1024,\n        dropout=0.1,\n        outdim=1024,\n        style='pytorch'),\n    neck=dict(\n        type='FPNC', in_channels=[256, 512, 1024, 2049], lateral_channels=256),\n    bbox_head=dict(\n        type='DBHead',\n        in_channels=256,\n        loss=dict(type='DBLoss', alpha=5.0, beta=10.0, bbce_loss=True),\n        postprocessor=dict(\n            type='DBParamPostprocessor',\n            text_repr_type='quad',\n            mask_thr=0.28,\n            min_text_score=0.2,\n            min_text_width=2,\n            use_approxPolyDP=True,\n            unclip_ratio=1.6,\n            arcLength_ratio=0.001,\n            max_candidates=3000)),\n    identity_head=dict(\n        type='IdentityHead',\n        downsample_ratio=32.0,\n        loss_weight=1.0,\n        reduction='mean',\n        negative_ratio=3.0,\n        bbce_loss=True),\n    train_cfg=None,\n    test_cfg=None,\n    scale_matching_score_map=False)\ndataset_type = 'OCRCLIPDataset'\ndata_root = './data/icdar2015'\ntrain = dict(\n    type='OCRCLIPDataset',\n    ann_file='./data/icdar2015/instances_training.json',\n    img_prefix='./data/icdar2015/imgs',\n    data_name='icdar2015',\n    pipeline=None)\ntest = dict(\n    type='OCRCLIPDataset',\n    ann_file='./data/icdar2015/instances_test.json',\n    img_prefix='./data/icdar2015/imgs',\n    data_name='icdar2015_test',\n    pipeline=None)\ntrain_list = [\n    dict(\n        type='OCRCLIPDataset',\n        ann_file='./data/icdar2015/instances_training.json',\n        img_prefix='./data/icdar2015/imgs',\n        data_name='icdar2015',\n        pipeline=None)\n]\ntest_list = [\n    dict(\n        type='OCRCLIPDataset',\n        ann_file='./data/icdar2015/instances_test.json',\n        img_prefix='./data/icdar2015/imgs',\n        data_name='icdar2015_test',\n        pipeline=None)\n]\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline_r18 = [\n    dict(type='LoadImageFromFile', color_type='color_ignore_orientation'),\n    dict(\n        type='LoadTextAnnotations',\n        with_bbox=True,\n        with_mask=True,\n        poly2mask=False),\n    dict(type='ColorJitter', brightness=0.12549019607843137, saturation=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(\n        type='ImgAug',\n        args=[['Fliplr', 0.5], {\n            'cls': 'Affine',\n            'rotate': [-10, 10]\n        }, ['Resize', [0.5, 3.0]]]),\n    dict(type='EastRandomCrop', target_size=(640, 640)),\n    dict(type='DBNetTargets', shrink_ratio=0.4),\n    dict(type='Pad', size_divisor=32),\n    dict(\n        type='CustomFormatBundle',\n        keys=['gt_shrink', 'gt_shrink_mask', 'gt_thr', 'gt_thr_mask'],\n        visualize=dict(flag=False, boundary_key='gt_shrink')),\n    dict(\n        type='Collect',\n        keys=['img', 'gt_shrink', 'gt_shrink_mask', 'gt_thr', 'gt_thr_mask'])\n]\ntrain_pipeline_r18_shrink = [\n    dict(type='LoadImageFromFile', color_type='color_ignore_orientation'),\n    dict(\n        type='LoadTextAnnotations',\n        with_bbox=True,\n        with_mask=True,\n        poly2mask=False),\n    dict(type='ColorJitter', brightness=0.12549019607843137, saturation=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(\n        type='ImgAug',\n        args=[['Fliplr', 0.5], {\n            'cls': 'Affine',\n            'rotate': [-10, 10]\n        }, ['Resize', [0.5, 3.0]]]),\n    dict(type='EastRandomCrop', target_size=(640, 640)),\n    dict(type='DBNetTargets', shrink_ratio=0.9),\n    dict(type='Pad', size_divisor=32),\n    dict(\n        type='CustomFormatBundle',\n        keys=['gt_shrink', 'gt_shrink_mask', 'gt_thr', 'gt_thr_mask'],\n        visualize=dict(flag=False, boundary_key='gt_shrink')),\n    dict(\n        type='Collect',\n        keys=['img', 'gt_shrink', 'gt_shrink_mask', 'gt_thr', 'gt_thr_mask'])\n]\ntest_pipeline_1333_736 = [\n    dict(type='LoadImageFromFile', color_type='color_ignore_orientation'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 736),\n        flip=False,\n        transforms=[\n            dict(type='Resize', img_scale=(2944, 736), keep_ratio=True),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\nimg_norm_cfg_r50dcnv2 = dict(\n    mean=[122.67891434, 116.66876762, 104.00698793],\n    std=[58.395, 57.12, 57.375],\n    to_rgb=True)\ntrain_pipeline_r50dcnv2 = [\n    dict(type='LoadImageFromFile', color_type='color_ignore_orientation'),\n    dict(\n        type='LoadTextAnnotations',\n        with_bbox=True,\n        with_mask=True,\n        poly2mask=False),\n    dict(type='ColorJitter', brightness=0.12549019607843137, saturation=0.5),\n    dict(\n        type='Normalize',\n        mean=[122.67891434, 116.66876762, 104.00698793],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(\n        type='ImgAug',\n        args=[['Fliplr', 0.5], {\n            'cls': 'Affine',\n            'rotate': [-10, 10]\n        }, ['Resize', [0.5, 3.0]]]),\n    dict(type='EastRandomCrop', target_size=(640, 640)),\n    dict(type='DBNetTargets', shrink_ratio=0.4),\n    dict(type='Pad', size_divisor=32),\n    dict(\n        type='CustomFormatBundle',\n        keys=['gt_shrink', 'gt_shrink_mask', 'gt_thr', 'gt_thr_mask'],\n        visualize=dict(flag=False, boundary_key='gt_shrink')),\n    dict(\n        type='Collect',\n        keys=['img', 'gt_shrink', 'gt_shrink_mask', 'gt_thr', 'gt_thr_mask'])\n]\ntrain_pipeline_r50dcnv2_shrink = [\n    dict(type='LoadImageFromFile', color_type='color_ignore_orientation'),\n    dict(\n        type='LoadTextAnnotations',\n        with_bbox=True,\n        with_mask=True,\n        poly2mask=False),\n    dict(type='ColorJitter', brightness=0.12549019607843137, saturation=0.5),\n    dict(\n        type='Normalize',\n        mean=[122.67891434, 116.66876762, 104.00698793],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(\n        type='ImgAug',\n        args=[['Fliplr', 0.5], {\n            'cls': 'Affine',\n            'rotate': [-10, 10]\n        }, ['Resize', [0.5, 3.0]]]),\n    dict(type='EastRandomCrop', target_size=(640, 640)),\n    dict(type='DBNetTargets', shrink_ratio=0.9),\n    dict(type='Pad', size_divisor=32),\n    dict(\n        type='CustomFormatBundle',\n        keys=['gt_shrink', 'gt_shrink_mask', 'gt_thr', 'gt_thr_mask'],\n        visualize=dict(flag=False, boundary_key='gt_shrink')),\n    dict(\n        type='Collect',\n        keys=['img', 'gt_shrink', 'gt_shrink_mask', 'gt_thr', 'gt_thr_mask'])\n]\ntest_pipeline_4068_1024 = [\n    dict(type='LoadImageFromFile', color_type='color_ignore_orientation'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(4068, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', img_scale=(2944, 736), keep_ratio=True),\n            dict(\n                type='Normalize',\n                mean=[122.67891434, 116.66876762, 104.00698793],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ntest_pipeline_vis_4068_1024 = [\n    dict(type='LoadImageFromFile', color_type='color_ignore_orientation'),\n    dict(\n        type='LoadTextAnnotations',\n        with_bbox=True,\n        with_mask=True,\n        poly2mask=False),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(4068, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', img_scale=(2944, 736), keep_ratio=True),\n            dict(\n                type='Normalize',\n                mean=[122.67891434, 116.66876762, 104.00698793],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(\n                type='CustomFormatBundle',\n                call_super=False,\n                keys=['ann_info'],\n                visualize=dict(flag=False, boundary_key='gt_shrink')),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img', 'ann_info'])\n        ])\n]\ntest_pipeline_4068_1152 = [\n    dict(type='LoadImageFromFile', color_type='color_ignore_orientation'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(4068, 1152),\n        flip=False,\n        transforms=[\n            dict(type='Resize', img_scale=(2944, 736), keep_ratio=True),\n            dict(\n                type='Normalize',\n                mean=[122.67891434, 116.66876762, 104.00698793],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ntest_pipeline_vis_4068_1152 = [\n    dict(type='LoadImageFromFile', color_type='color_ignore_orientation'),\n    dict(\n        type='LoadTextAnnotations',\n        with_bbox=True,\n        with_mask=True,\n        poly2mask=False),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(4068, 1152),\n        flip=False,\n        transforms=[\n            dict(type='Resize', img_scale=(2944, 736), keep_ratio=True),\n            dict(\n                type='Normalize',\n                mean=[122.67891434, 116.66876762, 104.00698793],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(\n                type='CustomFormatBundle',\n                call_super=False,\n                keys=['ann_info'],\n                visualize=dict(flag=False, boundary_key='gt_shrink')),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img', 'ann_info'])\n        ])\n]\ntest_pipeline_736_736 = [\n    dict(type='LoadImageFromFile', color_type='color_ignore_orientation'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2944, 736),\n        flip=False,\n        transforms=[\n            dict(type='Resize', img_scale=(2944, 736), keep_ratio=True),\n            dict(\n                type='Normalize',\n                mean=[122.67891434, 116.66876762, 104.00698793],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ntest_pipeline_vis_736_736 = [\n    dict(type='LoadImageFromFile', color_type='color_ignore_orientation'),\n    dict(\n        type='LoadTextAnnotations',\n        with_bbox=True,\n        with_mask=True,\n        poly2mask=False),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2944, 736),\n        flip=False,\n        transforms=[\n            dict(type='Resize', img_scale=(2944, 736), keep_ratio=True),\n            dict(\n                type='Normalize',\n                mean=[122.67891434, 116.66876762, 104.00698793],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(\n                type='CustomFormatBundle',\n                call_super=False,\n                keys=['ann_info'],\n                visualize=dict(flag=False, boundary_key='gt_shrink')),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img', 'ann_info'])\n        ])\n]\ntest_pipeline_4068_736 = [\n    dict(type='LoadImageFromFile', color_type='color_ignore_orientation'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(4068, 736),\n        flip=False,\n        transforms=[\n            dict(type='Resize', img_scale=(2944, 736), keep_ratio=True),\n            dict(\n                type='Normalize',\n                mean=[122.67891434, 116.66876762, 104.00698793],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ntest_pipeline_vis_4068_736 = [\n    dict(type='LoadImageFromFile', color_type='color_ignore_orientation'),\n    dict(\n        type='LoadTextAnnotations',\n        with_bbox=True,\n        with_mask=True,\n        poly2mask=False),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(4068, 736),\n        flip=False,\n        transforms=[\n            dict(type='Resize', img_scale=(2944, 736), keep_ratio=True),\n            dict(\n                type='Normalize',\n                mean=[122.67891434, 116.66876762, 104.00698793],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(\n                type='CustomFormatBundle',\n                call_super=False,\n                keys=['ann_info'],\n                visualize=dict(flag=False, boundary_key='gt_shrink')),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img', 'ann_info'])\n        ])\n]\ntest_pipeline_800_800 = [\n    dict(type='LoadImageFromFile', color_type='color_ignore_orientation'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(800, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', img_scale=(800, 800), keep_ratio=True),\n            dict(\n                type='Normalize',\n                mean=[122.67891434, 116.66876762, 104.00698793],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ntest_pipeline_vis_800_800 = [\n    dict(type='LoadImageFromFile', color_type='color_ignore_orientation'),\n    dict(\n        type='LoadTextAnnotations',\n        with_bbox=True,\n        with_mask=True,\n        poly2mask=False),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(800, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', img_scale=(800, 800), keep_ratio=True),\n            dict(\n                type='Normalize',\n                mean=[122.67891434, 116.66876762, 104.00698793],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(\n                type='CustomFormatBundle',\n                call_super=False,\n                keys=['ann_info'],\n                visualize=dict(flag=False, boundary_key='gt_shrink')),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img', 'ann_info'])\n        ])\n]\ntest_pipeline_2944_800 = [\n    dict(type='LoadImageFromFile', color_type='color_ignore_orientation'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2944, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', img_scale=(2944, 800), keep_ratio=True),\n            dict(\n                type='Normalize',\n                mean=[122.67891434, 116.66876762, 104.00698793],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ntest_pipeline_4068_800 = [\n    dict(type='LoadImageFromFile', color_type='color_ignore_orientation'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(4068, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', img_scale=(2944, 800), keep_ratio=True),\n            dict(\n                type='Normalize',\n                mean=[122.67891434, 116.66876762, 104.00698793],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ntest_pipeline_vis_2944_800 = [\n    dict(type='LoadImageFromFile', color_type='color_ignore_orientation'),\n    dict(\n        type='LoadTextAnnotations',\n        with_bbox=True,\n        with_mask=True,\n        poly2mask=False),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2944, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', img_scale=(2944, 800), keep_ratio=True),\n            dict(\n                type='Normalize',\n                mean=[122.67891434, 116.66876762, 104.00698793],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(\n                type='CustomFormatBundle',\n                call_super=False,\n                keys=['ann_info'],\n                visualize=dict(flag=False, boundary_key='gt_shrink')),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img', 'ann_info'])\n        ])\n]\ntest_pipeline_1600_1024 = [\n    dict(type='LoadImageFromFile', color_type='color_ignore_orientation'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1600, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', img_scale=(1600, 1024), keep_ratio=True),\n            dict(\n                type='Normalize',\n                mean=[122.67891434, 116.66876762, 104.00698793],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ntest_pipeline_vis_1600_1024 = [\n    dict(type='LoadImageFromFile', color_type='color_ignore_orientation'),\n    dict(\n        type='LoadTextAnnotations',\n        with_bbox=True,\n        with_mask=True,\n        poly2mask=False),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1600, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', img_scale=(1600, 1024), keep_ratio=True),\n            dict(\n                type='Normalize',\n                mean=[122.67891434, 116.66876762, 104.00698793],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(\n                type='CustomFormatBundle',\n                call_super=False,\n                keys=['ann_info'],\n                visualize=dict(flag=False, boundary_key='gt_shrink')),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img', 'ann_info'])\n        ])\n]\ntest_pipeline_1024_768 = [\n    dict(type='LoadImageFromFile', color_type='color_ignore_orientation'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 768),\n        flip=False,\n        transforms=[\n            dict(type='Resize', img_scale=(2944, 736), keep_ratio=True),\n            dict(\n                type='Normalize',\n                mean=[122.67891434, 116.66876762, 104.00698793],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ntest_pipeline_2944_768 = [\n    dict(type='LoadImageFromFile', color_type='color_ignore_orientation'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2944, 768),\n        flip=False,\n        transforms=[\n            dict(type='Resize', img_scale=(2944, 736), keep_ratio=True),\n            dict(\n                type='Normalize',\n                mean=[122.67891434, 116.66876762, 104.00698793],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ntest_pipeline_list = [[{\n    'type': 'LoadImageFromFile',\n    'color_type': 'color_ignore_orientation'\n}, {\n    'type':\n    'MultiScaleFlipAug',\n    'img_scale': (4068, 1024),\n    'flip':\n    False,\n    'transforms': [{\n        'type': 'Resize',\n        'img_scale': (2944, 736),\n        'keep_ratio': True\n    }, {\n        'type': 'Normalize',\n        'mean': [122.67891434, 116.66876762, 104.00698793],\n        'std': [58.395, 57.12, 57.375],\n        'to_rgb': True\n    }, {\n        'type': 'Pad',\n        'size_divisor': 32\n    }, {\n        'type': 'ImageToTensor',\n        'keys': ['img']\n    }, {\n        'type': 'Collect',\n        'keys': ['img']\n    }]\n}],\n                      [{\n                          'type': 'LoadImageFromFile',\n                          'color_type': 'color_ignore_orientation'\n                      }, {\n                          'type':\n                          'MultiScaleFlipAug',\n                          'img_scale': (4068, 1024),\n                          'flip':\n                          False,\n                          'transforms': [{\n                              'type': 'Resize',\n                              'img_scale': (2944, 736),\n                              'keep_ratio': True\n                          }, {\n                              'type':\n                              'Normalize',\n                              'mean':\n                              [122.67891434, 116.66876762, 104.00698793],\n                              'std': [58.395, 57.12, 57.375],\n                              'to_rgb':\n                              True\n                          }, {\n                              'type': 'Pad',\n                              'size_divisor': 32\n                          }, {\n                              'type': 'ImageToTensor',\n                              'keys': ['img']\n                          }, {\n                              'type': 'Collect',\n                              'keys': ['img']\n                          }]\n                      }],\n                      [{\n                          'type': 'LoadImageFromFile',\n                          'color_type': 'color_ignore_orientation'\n                      }, {\n                          'type':\n                          'MultiScaleFlipAug',\n                          'img_scale': (800, 800),\n                          'flip':\n                          False,\n                          'transforms': [{\n                              'type': 'Resize',\n                              'img_scale': (800, 800),\n                              'keep_ratio': True\n                          }, {\n                              'type':\n                              'Normalize',\n                              'mean':\n                              [122.67891434, 116.66876762, 104.00698793],\n                              'std': [58.395, 57.12, 57.375],\n                              'to_rgb':\n                              True\n                          }, {\n                              'type': 'Pad',\n                              'size_divisor': 32\n                          }, {\n                              'type': 'ImageToTensor',\n                              'keys': ['img']\n                          }, {\n                              'type': 'Collect',\n                              'keys': ['img']\n                          }]\n                      }],\n                      [{\n                          'type': 'LoadImageFromFile',\n                          'color_type': 'color_ignore_orientation'\n                      }, {\n                          'type':\n                          'MultiScaleFlipAug',\n                          'img_scale': (4068, 736),\n                          'flip':\n                          False,\n                          'transforms': [{\n                              'type': 'Resize',\n                              'img_scale': (2944, 736),\n                              'keep_ratio': True\n                          }, {\n                              'type':\n                              'Normalize',\n                              'mean':\n                              [122.67891434, 116.66876762, 104.00698793],\n                              'std': [58.395, 57.12, 57.375],\n                              'to_rgb':\n                              True\n                          }, {\n                              'type': 'Pad',\n                              'size_divisor': 32\n                          }, {\n                              'type': 'ImageToTensor',\n                              'keys': ['img']\n                          }, {\n                              'type': 'Collect',\n                              'keys': ['img']\n                          }]\n                      }]]\ndata = dict(\n    samples_per_gpu=16,\n    workers_per_gpu=8,\n    val_dataloader=dict(samples_per_gpu=1),\n    test_dataloader=dict(samples_per_gpu=1),\n    train=dict(\n        type='UniformConcatDataset',\n        datasets=[\n            dict(\n                type='OCRCLIPDataset',\n                ann_file='./data/icdar2015/instances_training.json',\n                img_prefix='./data/icdar2015/imgs',\n                data_name='icdar2015',\n                pipeline=None)\n        ],\n        pipeline=[\n            dict(\n                type='LoadImageFromFile',\n                color_type='color_ignore_orientation'),\n            dict(\n                type='LoadTextAnnotations',\n                with_bbox=True,\n                with_mask=True,\n                poly2mask=False),\n            dict(\n                type='ColorJitter',\n                brightness=0.12549019607843137,\n                saturation=0.5),\n            dict(\n                type='Normalize',\n                mean=[122.67891434, 116.66876762, 104.00698793],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(\n                type='ImgAug',\n                args=[['Fliplr', 0.5], {\n                    'cls': 'Affine',\n                    'rotate': [-10, 10]\n                }, ['Resize', [0.5, 3.0]]]),\n            dict(type='EastRandomCrop', target_size=(640, 640)),\n            dict(type='DBNetTargets', shrink_ratio=0.4),\n            dict(type='Pad', size_divisor=32),\n            dict(\n                type='CustomFormatBundle',\n                keys=['gt_shrink', 'gt_shrink_mask', 'gt_thr', 'gt_thr_mask'],\n                visualize=dict(flag=False, boundary_key='gt_shrink')),\n            dict(\n                type='Collect',\n                keys=[\n                    'img', 'gt_shrink', 'gt_shrink_mask', 'gt_thr',\n                    'gt_thr_mask'\n                ])\n        ]),\n    val=dict(\n        type='UniformConcatDataset',\n        datasets=[\n            dict(\n                type='OCRCLIPDataset',\n                ann_file='./data/icdar2015/instances_test.json',\n                img_prefix='./data/icdar2015/imgs',\n                data_name='icdar2015_test',\n                pipeline=None)\n        ],\n        pipeline=[\n            dict(\n                type='LoadImageFromFile',\n                color_type='color_ignore_orientation'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(4068, 1024),\n                flip=False,\n                transforms=[\n                    dict(\n                        type='Resize', img_scale=(2944, 736), keep_ratio=True),\n                    dict(\n                        type='Normalize',\n                        mean=[122.67891434, 116.66876762, 104.00698793],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='UniformConcatDataset',\n        datasets=[\n            dict(\n                type='OCRCLIPDataset',\n                ann_file='./data/icdar2015/instances_test.json',\n                img_prefix='./data/icdar2015/imgs',\n                data_name='icdar2015_test',\n                pipeline=None)\n        ],\n        pipeline=[\n            dict(\n                type='LoadImageFromFile',\n                color_type='color_ignore_orientation'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(4068, 1024),\n                flip=False,\n                transforms=[\n                    dict(\n                        type='Resize', img_scale=(2944, 736), keep_ratio=True),\n                    dict(\n                        type='Normalize',\n                        mean=[122.67891434, 116.66876762, 104.00698793],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\noptimizer = dict(\n    type='Adam',\n    lr=0.0001,\n    weight_decay=0.0001,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            backbone=dict(lr_mult=0.1),\n            text_encoder=dict(lr_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(policy='poly', power=0.9, min_lr=1e-07, by_epoch=True)\ntotal_epochs = 1200\nwork_dir = './config_1023_104652'\ngpu_ids = range(0, 4)\n", "seed": 898907913, "exp_name": "config.py", "hook_msgs": {}}
